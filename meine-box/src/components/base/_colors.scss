// Here are the color definitions
$color-black: black;
$color-white: white;
$color-whitesmoke: whitesmoke;
$color-green: #65b22e;
$color-dark-green: #38790a;
$color-super-light-green: rgb(208, 253, 208);
$color-light-green: lightgreen;
$color-yellow-green: yellowgreen;
$color-yellow: yellow;
$color-red: #fa4359;

// Use these colors via clr() function rather than colors directly.
// This way we can change colors easily and fast.
// If some component/element needs a lot of colors please create their own map.
// Note: Remeber to add the new mab to root and create it's own each loop.

$defaultColors: (
  text: $color-black,
  text-inverse: $color-white,
  primary: $color-green,
  primary-secondary: $color-light-green,
  primary-dark: $color-dark-green,
  background-gray: $color-whitesmoke,
  light-background: $color-super-light-green,
  button-primary: $color-white,
  stock-full: $color-yellow-green,
  stock-low: $color-yellow,
  stock-empty: $color-red,
);

// The function that you can access the colors anywhere easily:
// for example: background-color: clr(primary);

// The colorChoice called in the function is prefixed with
// `var(--c-` to call the custom property for that color.
// for example: color: clr(primary); will return color: var(--c-primary);
// Note: (The `--c-` is added via the `@each` loops below)
@function clr($colorChoice) {
  @return var(--c-#{$colorChoice});
}

// Create CSS custom properties
// This loop creates a css custom property for each variable in a map.
// for example: text: $color-black, -> --c-text: $color-black;
//
// The first `@each` loop will create a custom property for each item in the
// $defaultColors map. So put all of your default colors there.
:root {
  // Create custom properties for default colors
  @each $name, $color in $defaultColors {
    --c-#{$name}: #{$color};
  }
}
